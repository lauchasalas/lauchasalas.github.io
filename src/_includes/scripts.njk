<!-- AOS (animaciones al hacer scroll) -->
<script src="https://unpkg.com/aos@2.3.1/dist/aos.js" defer></script>
<script>
  AOS.init({ duration: 800, once: true });
</script>

<!-- Interacciones: parallax, carrusel, nav activa y back-to-top -->
<script>
  // Parallax suave en Hero
  const hero = document.getElementById("hero");
  window.addEventListener("scroll", () => {
    if (hero) hero.style.backgroundPositionY = `${window.pageYOffset * 0.3}px`;
  });

  // Mini-carrusel: flechas, auto-scroll, drag y dots
  (function(){
    const mini    = document.getElementById("mini-carousel");
    const prevBtn = document.getElementById("carousel-prev");
    const nextBtn = document.getElementById("carousel-next");
    const dots    = document.getElementById("dots");
    if (!mini || !prevBtn || !nextBtn || !dots) return;

    const count = mini.children.length;
    let   current = 0, isDown = false, startX, scrollLeft;

    // Generar dots
    for (let i = 0; i < count; i++){
      const d = document.createElement("span");
      d.className = "dot";
      dots.append(d);
    }
    const allDots = dots.children;

    function updateDots(){
      Array.from(allDots).forEach((d,i) =>
        d.classList.toggle("active", i === current)
      );
    }

    // Flechas
    prevBtn.addEventListener("click", () => {
      current = (current - 1 + count) % count;
      mini.scrollBy({ left: -mini.offsetWidth * 0.4, behavior: "smooth" });
      updateDots();
    });
    nextBtn.addEventListener("click", () => {
      current = (current + 1) % count;
      mini.scrollBy({ left: mini.offsetWidth * 0.4, behavior: "smooth" });
      updateDots();
    });

    // Auto-scroll cada 4s
    setInterval(() => nextBtn.click(), 4000);

    // Drag con mouse
    mini.addEventListener("mousedown", e => {
      isDown = true;
      startX = e.pageX - mini.offsetLeft;
      scrollLeft = mini.scrollLeft;
    });
    mini.addEventListener("mouseup", () => isDown = false);
    mini.addEventListener("mouseleave", () => isDown = false);
    mini.addEventListener("mousemove", e => {
      if (!isDown) return;
      const x = e.pageX - mini.offsetLeft;
      mini.scrollLeft = scrollLeft - (x - startX) * 1.5;
    });

    // Drag con touch
    mini.addEventListener("touchstart", e => {
      isDown = true;
      startX = e.touches[0].pageX - mini.offsetLeft;
      scrollLeft = mini.scrollLeft;
    });
    mini.addEventListener("touchend", () => isDown = false);
    mini.addEventListener("touchmove", e => {
      if (!isDown) return;
      const x = e.touches[0].pageX - mini.offsetLeft;
      mini.scrollLeft = scrollLeft - (x - startX) * 1.5;
    });

    // Inicializar dots
    updateDots();
  })();

  // Enlace activo en navbar
  (function(){
    const secs = document.querySelectorAll("section[id]");
    const links = document.querySelectorAll("nav a");
    window.addEventListener("scroll", () => {
      const y = window.pageYOffset;
      secs.forEach(sec => {
        const top = sec.offsetTop - 100;
        const h   = sec.offsetHeight;
        const link= document.querySelector(`nav a[href="#${sec.id}"]`);
        if (y >= top && y < top + h) {
          links.forEach(a => a.classList.remove("text-black","font-extrabold"));
          link && link.classList.add("text-black","font-extrabold");
        }
      });
    });
  })();

  // Back-to-Top
  (function(){
    const toTop = document.getElementById("toTop");
    if (!toTop) return;
    window.addEventListener("scroll", () => {
      toTop.classList.toggle("show", window.pageYOffset > 400);
    });
    toTop.addEventListener("click", () => {
      window.scrollTo({ top: 0, behavior: "smooth" });
    });
  })();
</script>
